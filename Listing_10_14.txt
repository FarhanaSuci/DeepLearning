# Multiclass Classification with the Iris Flowers Dataset
import numpy
from pandas import read_csv
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.utils import np_utils
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder


#load dataset
filename = 'D:\\Dataset\IRIS.csv'
names = ['sepal_length', 'sepal_width', 'petal_length', 'petal_widtg', 'species']
dataframe = read_csv(filename, names=names)
array = dataframe.values
X = array[:,0:4].astype(float)
# Dataframe.astype(float) - Compatibility with numerical operations: Converting Dataframe columns to the folat data type can ensure compatibility with other numerical operations and functions with pandas  
Y = array[:,4]

# encode class values as integers
encoder = LabelEncoder()
encoder.fit(Y)
encoded_Y = encoder.transform(Y)
#print(encoded_Y)
# convert integers to dummy variables (i.e. one hot encoded)
encoded_output= np_utils.to_categorical(encoded_Y)
#print(dummy_y)

# define baseline model
def baseline_model():
    # create model
    model = Sequential()
    model.add(Dense(4, input_dim=4, kernel_initializer= 'normal' , activation= 'relu'))
    model.add(Dense(3, kernel_initializer= 'normal', activation= 'sigmoid'))
    # Compile model
    model.compile(loss= 'categorical_crossentropy', optimizer= 'adam' , metrics=['accuracy'])
    return model

model = KerasClassifier(build_fn=baseline_model, epochs=100, batch_size=5, verbose=0)
kfold = KFold(n_splits=10, shuffle=True)
results = cross_val_score(model, X, encoded_output, cv=kfold)
for x in results:
    print(x)
print("Accuracy: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))